// Teste espec√≠fico para buscar_visitas_morador
import { CondominioQdrantClient } from './qdrant-client.js';
import dotenv from 'dotenv';

dotenv.config();

async function testarVisitasMorador() {
  console.log('üîç Teste da fun√ß√£o buscar_visitas_morador');
  console.log('=========================================');

  const qdrantUrl = process.env.QDRANT_URL || 'http://localhost:6333';
  const qdrantApiKey = process.env.QDRANT_API_KEY;
  const collectionName = process.env.QDRANT_COLLECTION_NAME || 'condominio_access';
  const openaiApiKey = process.env.OPENAI_API_KEY;

  if (!openaiApiKey) {
    console.error('‚ùå API Key da OpenAI n√£o configurada! Defina OPENAI_API_KEY no arquivo .env');
    return;
  }

  console.log(`üì° Conectando ao Qdrant em ${qdrantUrl}`);
  console.log(`üìä Usando cole√ß√£o: ${collectionName}`);

  try {
    // Cria cliente
    const client = new CondominioQdrantClient({
      url: qdrantUrl,
      apiKey: qdrantApiKey,
      collectionName,
      openaiApiKey
    });

    // Teste 1: Verifica conex√£o b√°sica
    console.log('\nüîå Verificando conex√£o com Qdrant...');
    const conexaoOk = await client.testarConexao();
    if (conexaoOk) {
      console.log('‚úÖ Conex√£o com Qdrant estabelecida!');
    } else {
      console.error('‚ùå N√£o foi poss√≠vel conectar ao Qdrant.');
      return;
    }

    // Teste 2: Verifica exist√™ncia da cole√ß√£o
    const colecaoExiste = await client.verificarColecao();
    console.log(`Cole√ß√£o ${collectionName}: ${colecaoExiste ? '‚úÖ Encontrada' : '‚ùå N√£o encontrada'}`);
    if (!colecaoExiste) {
      console.error('‚ùå Cole√ß√£o n√£o encontrada. Verifique se a cole√ß√£o foi criada no Qdrant.');
      return;
    }

    // Teste 3: buscarVisitasMorador sem data_inicio/data_fim
    console.log('\nüè† Teste 1: buscarVisitasMorador sem datas');
    try {
      // O nome exato do morador deve estar presente na sua base
      const moradorNome = 'NICOLAS MORAES SALVADOR (A10-236)'; // Use um nome de morador que existe nos seus dados
      console.log(`Buscando visitas para morador: "${moradorNome}"`);
      
      const resultado = await client.buscarVisitasMorador(moradorNome, undefined, undefined, 5);
      console.log(`‚úÖ Sucesso! Encontrados: ${resultado.total} registros`);
      
      if (resultado.total > 0) {
        console.log('\nPrimeiros registros encontrados:');
        resultado.records.forEach((registro, i) => {
          console.log(`${i + 1}. Visitante: ${registro.pessoa_nome} - Entrada: ${registro.entrada_datetime}`);
        });
      }
    } catch (error) {
      console.error('‚ùå Erro ao buscar visitas:', error);
      
      // Investiga√ß√£o detalhada do erro
      if (error instanceof Error) {
        console.log('\nDetalhes do erro:');
        console.log('- Mensagem:', error.message);
        console.log('- Stack:', error.stack);
        
        // Verifica se o erro possui detalhes adicionais
        const anyError = error as any;
        if (anyError.data && anyError.data.status && anyError.data.status.error) {
          console.log('- Erro espec√≠fico do Qdrant:', anyError.data.status.error);
        }
      }
    }

    // Teste 4: buscarVisitasMorador com data_inicio/data_fim
    console.log('\nüè† Teste 2: buscarVisitasMorador com datas');
    try {
      // O nome exato do morador deve estar presente na sua base
      const moradorNome = 'NICOLAS MORAES SALVADOR (A10-236)'; // Use um nome de morador que existe nos seus dados
      const dataInicio = '2025-03-01';
      const dataFim = '2025-03-31';
      
      console.log(`Buscando visitas para morador: "${moradorNome}" (${dataInicio} a ${dataFim})`);
      
      const resultado = await client.buscarVisitasMorador(moradorNome, dataInicio, dataFim, 5);
      console.log(`‚úÖ Sucesso! Encontrados: ${resultado.total} registros`);
      
      if (resultado.total > 0) {
        console.log('\nPrimeiros registros encontrados:');
        resultado.records.forEach((registro, i) => {
          console.log(`${i + 1}. Visitante: ${registro.pessoa_nome} - Entrada: ${registro.entrada_datetime}`);
        });
      }
    } catch (error) {
      console.error('‚ùå Erro ao buscar visitas com datas:', error);
      
      // Investiga√ß√£o detalhada do erro
      if (error instanceof Error) {
        console.log('\nDetalhes do erro:');
        console.log('- Mensagem:', error.message);
        console.log('- Stack:', error.stack);
        
        // Verifica se o erro possui detalhes adicionais
        const anyError = error as any;
        if (anyError.data && anyError.data.status && anyError.data.status.error) {
          console.log('- Erro espec√≠fico do Qdrant:', anyError.data.status.error);
        }
      }
    }

    console.log('\n‚úÖ Testes conclu√≠dos!');
  } catch (error) {
    console.error('‚ùå Erro fatal durante os testes:', error);
  }
}

testarVisitasMorador()
  .catch(error => {
    console.error('Erro n√£o tratado:', error);
  });
