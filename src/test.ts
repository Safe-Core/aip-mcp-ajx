#!/usr/bin/env node

import { CondominioQdrantClient } from './qdrant-client.js';
import dotenv from 'dotenv';

// Carrega vari√°veis de ambiente
dotenv.config();

async function testarServidor() {
  console.log('üè¢ Testando AJX ITAP-ORV MCP\n');

  // Configura√ß√£o do cliente
  const config = {
    url: process.env.QDRANT_URL || 'http://localhost:6333',
    apiKey: process.env.QDRANT_API_KEY,
    collectionName: process.env.QDRANT_COLLECTION_NAME || 'condominio_access',
    openaiApiKey: process.env.OPENAI_API_KEY,
    embeddingModel: process.env.OPENAI_EMBEDDING_MODEL || 'text-embedding-3-small',
  };

  console.log('üìã Configura√ß√£o:');
  console.log(`- URL Qdrant: ${config.url}`);
  console.log(`- Cole√ß√£o: ${config.collectionName}`);
  console.log(`- API Key Qdrant: ${config.apiKey ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
  console.log(`- API Key OpenAI: ${config.openaiApiKey ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
  console.log(`- Modelo Embedding: ${config.embeddingModel}\n`);

  const client = new CondominioQdrantClient(config);

  try {
    // Teste 1: Conex√£o
    console.log('üîç Teste 1: Verificando conex√£o...');
    const conectado = await client.testarConexao();
    console.log(`Resultado: ${conectado ? '‚úÖ Conectado' : '‚ùå Falha na conex√£o'}`);

    if (!conectado) {
      console.log('\n‚ùå N√£o foi poss√≠vel conectar ao Qdrant. Verifique:');
      console.log('- Se o Qdrant est√° rodando');
      console.log('- Se a URL est√° correta');
      console.log('- Se a API key est√° configurada (se necess√°rio)');
      return;
    }

    // Teste 2: Cole√ß√£o
    console.log('\nüóÇÔ∏è Teste 2: Verificando cole√ß√£o...');
    const colecaoExiste = await client.verificarColecao();
    console.log(`Resultado: ${colecaoExiste ? '‚úÖ Cole√ß√£o encontrada' : '‚ùå Cole√ß√£o n√£o encontrada'}`);

    if (!colecaoExiste) {
      console.log('\n‚ùå Cole√ß√£o n√£o encontrada. Verifique:');
      console.log('- Se o nome da cole√ß√£o est√° correto');
      console.log('- Se a cole√ß√£o foi criada no Qdrant');
      console.log('- Se h√° dados na cole√ß√£o');
      return;
    }

    // Teste 3: Busca b√°sica
    console.log('\nüîç Teste 3: Testando busca b√°sica...');
    try {
      const resultado = await client.buscarPorTexto('gabriel', 1);
      console.log(`Resultado: ‚úÖ Busca executada (${resultado.total} registros)`);
    } catch (error) {
      console.log(`Resultado: ‚ùå Erro na busca: ${error}`);
    }

    // Teste 4: Busca com filtros
    console.log('\n‚öôÔ∏è Teste 4: Testando busca com filtros...');
    try {
      const resultado = await client.buscarComFiltros({ limit: 1, offset: 0 });
      console.log(`Resultado: ‚úÖ Busca com filtros executada (${resultado.total} registros)`);
    } catch (error) {
      console.log(`Resultado: ‚ùå Erro na busca com filtros: ${error}`);
    }

    console.log('\n‚úÖ Todos os testes conclu√≠dos!');
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('1. Configure seu cliente MCP para usar este servidor');
    console.log('2. Use o arquivo mcp-config.json como refer√™ncia');
    console.log('3. Execute: npm run build && npm start');

  } catch (error) {
    console.log(`\n‚ùå Erro durante os testes: ${error}`);
    console.log('\nüîß Dicas de troubleshooting:');
    console.log('- Verifique se todas as depend√™ncias est√£o instaladas');
    console.log('- Verifique o arquivo .env');
    console.log('- Verifique se o Qdrant est√° acess√≠vel');
  }
}

// Executar testes
testarServidor().catch((error) => {
  console.error('‚ùå Erro cr√≠tico:', error);
  process.exit(1);
});
